<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="SEQUENCE" height="149px" preserveAspectRatio="none" style="width:113px;height:149px;background:#FFFFFF;" version="1.1" viewBox="0 0 113 149" width="113px" zoomAndPan="magnify"><defs><style type="text/css"><![CDATA[
svg[data-diagram-type=SEQUENCE] g.header.floating-header {
    opacity: 0.9;
    display: none;
}

svg[data-diagram-type=SEQUENCE].floating-header-active g.header.floating-header {
    display: inline;
}

svg[data-diagram-type=SEQUENCE] g.floating-header-toggle-button  {
    cursor: pointer;
    opacity: 0;
    visibility: hidden;
}

svg[data-diagram-type=SEQUENCE].floating-header-active g.floating-header-toggle-button .button-icon  {
    fill: #333333 !important;
}

svg[data-diagram-type=SEQUENCE] g.header:hover g.floating-header-toggle-button {
    opacity: 0.8;
    visibility: visible;
    animation: fadeOut 2s forwards 1s; /* Delay the fade out effect */
}

svg[data-diagram-type=SEQUENCE] g.header g.floating-header-toggle-button:hover {
    opacity: 1;
    visibility: visible;
    animation: none !important;
}

svg[data-diagram-type=SEQUENCE] g.floating-header-toggle-button:hover .button-background  {
    stroke-width: 1 !important;
}

svg[data-diagram-type=SEQUENCE]:has(g.floating-header-toggle-button:hover) g.header * {
    filter: invert(0.1);
}

svg[data-diagram-type=SEQUENCE] g.floating-header-toggle-button:hover,
svg[data-diagram-type=SEQUENCE] g.floating-header-toggle-button:hover * {
    filter: none !important;
}

@keyframes fadeOut {
  0% {
    opacity: 0.8;
    visibility: visible;
  }
  100% {
    opacity: 0;
    visibility: hidden;
  }
}

svg[data-diagram-type=SEQUENCE] g.participant {
    cursor: pointer;
}

xsvg[data-diagram-type=SEQUENCE].filter-active g,
svg[data-diagram-type=SEQUENCE].filter-active g  > g:not(.header) {
    opacity: 0.2;
}

svg[data-diagram-type=SEQUENCE].filter-active g.filter-highlight {
    filter: url(#colorize-green);
    opacity: 1.0 !important;
}

svg[data-diagram-type=SEQUENCE].filter-active.filter-nomatch g.filter-highlight {
    filter: url(#colorize-red) !important;
}

svg[data-diagram-type=SEQUENCE].filter-active:not(.filter-nomatch) g.filter-highlight text {
    font-weight: bold;
}

]]></style><script>(function() {
	const SVG_NS = "http://www.w3.org/2000/svg";
    const LOCAL_STORAGE_FLOATING_HEADER_ACTIVE = "net.sourceforge.plantuml.sequence-diagram.floating-header.active";

    function toggleFloatingHeader() {
        try {
            const shouldNowBeActive = ! isFloatingHeaderActive();
            svgRoot.classList.toggle("floating-header-active", shouldNowBeActive);
            window.localStorage?.setItem(LOCAL_STORAGE_FLOATING_HEADER_ACTIVE, `${shouldNowBeActive}`);

            if (shouldNowBeActive) {
                updateFloatingHeaderPosition(svgRoot.querySelector("g.floating-header"));
            }
        } catch (e) {
            console.error("Error while toggling floating header:", e, svgRoot);
            disableFloatingHeaderDueToError();
        }
    }

    function isFloatingHeaderActive() {
        return svgRoot.classList.contains("floating-header-active");
    }

    function disableFloatingHeaderDueToError() {
        try {
            svgRoot.classList.remove("floating-header-active");
            svgRoot.classList.add("floating-header-error");
        } catch(e) {
            console.error("Failed to disable floating header:", e, svgRoot);
        }
    }

	function findAncestorWithTagName(elem, tagName) {
		while (elem &amp;&amp; elem.nodeName.toLowerCase() !== tagName) {
			elem = elem.parentElement;
		}
		return elem;
	}

	function groupParticipantHeaders() {
	    const group = document.createElementNS(SVG_NS, "g");
        group.classList.add("header");

	    svgRoot.querySelectorAll("g.participant-head").forEach(participant =&gt; {
	        group.appendChild(participant);
	    });

	    svgRoot.querySelector("g").appendChild(group);

	    // Add a background rect, as a hit target
		const headerBounds = group.getBBox();
		const background = document.createElementNS(SVG_NS, "rect")
		background.classList.add("header-background");
		background.setAttribute("x", "0");
		background.setAttribute("y", "0");
		background.setAttribute("width", `${svgRoot.getBBox().width}`);
		background.setAttribute("height", `${headerBounds.y + headerBounds.height + 10}`);
		background.setAttribute("fill", svgRoot.style.backgroundColor);

		group.insertAdjacentElement("afterbegin", background);

	    return group;
	}

	function isScrollableContainer(elem) {
		const overflowY = getComputedStyle(elem).overflowY;
		return (overflowY === "auto" || overflowY === "scroll") &amp;&amp; elem.scrollHeight &gt; elem.clientHeight
	}

    function createFloatingHeaderToggleButton(header) {
        const buttonGroup = document.createElementNS(SVG_NS, "g");

        buttonGroup.classList.add("floating-header-toggle-button");
        buttonGroup.innerHTML = `
            &lt;title&gt;Pin the header while scrolling&lt;/title&gt;
            &lt;rect class="button-background" fill="#FFFFFF" width="17" height="17" rx="1" ry="1" x="3" y="2" style="stroke:black;stroke-width:0.5;"/&gt;
            &lt;path class="button-icon" fill="#efefef" style="stroke:black;stroke-width:0.5" d="M13 3.5 a.5.5 0 0 1 .354.146l4.95 4.95a.5.5 0 0 1 0 .707c-.48.48-1.072.588-1.503.588-.177 0-.335-.018-.46-.039l-3.134 3.134a5.927 5.927 0 0 1 .16 1.013c.046.702-.032 1.687-.72 2.375a.5.5 0 0 1-.707 0l-2.829-2.828-3.182 3.182c-.195.195-1.219.902-1.414.707-.195-.195.512-1.22.707-1.414l3.182-3.182-2.828-2.829a.5.5 0 0 1 0-.707c.688-.688 1.673-.767 2.375-.72a5.922 5.922 0 0 1 1.013.16l3.134-3.133a2.772 2.772 0 0 1-.04-.461c0-.43.108-1.022.589-1.503a.5.5 0 0 1 .353-.146z"/&gt;
        `;

        header.appendChild(buttonGroup);
        return buttonGroup;
    }

	function createFloatingHeader(originalHeader) {

	    const floatingHeaderGroup = originalHeader.cloneNode(true);
		floatingHeaderGroup.classList.add("floating-header");

		svgRoot.querySelector("g").appendChild(floatingHeaderGroup);
		return floatingHeaderGroup;
	}

	function ancestorsMaxClientY(startElement) {
		let currentMax = 0;
		let parent = startElement.parentElement;

		while (parent) {
			currentMax = Math.max(parent.getBoundingClientRect().y, currentMax);
			parent = parent.parentElement;
		}

		return currentMax;
	}

	function updateFloatingHeaderPosition(floatingHeaderElement) {
	    try {
	        if (!isFloatingHeaderActive()) {
	            return;
	        }

            const svgTop = svgRoot.getBoundingClientRect().y;
            const ancestorsMaxTop = ancestorsMaxClientY(svgRoot);
            const amountOfOverflow = Math.floor(Math.max(0, ancestorsMaxTop - svgTop));

            floatingHeaderElement.setAttribute("transform", `translate(0, ${amountOfOverflow})`);
            floatingHeaderElement.classList.toggle("floating", amountOfOverflow &gt; 0);
	    } catch(e) {
	        console.error("Error while updating floating header position:", e, svgRoot);
	        disableFloatingHeaderDueToError();
	    }
	}

	function initFloatingHeader() {
	    try {
	        const header = groupParticipantHeaders()
            const toggleButton = createFloatingHeaderToggleButton(header);
            const floatingHeaderElement = createFloatingHeader(header)

            svgRoot.querySelectorAll("g.floating-header-toggle-button").forEach(button =&gt; {
                button.addEventListener("click", toggleFloatingHeader);
            });

            window.addEventListener("scroll", () =&gt; {
                updateFloatingHeaderPosition(floatingHeaderElement);
            });

            let parentElement = svgRoot;

            while (parentElement != null) {
                if (isScrollableContainer(parentElement)) {
                    parentElement.addEventListener("scroll", () =&gt; {
                        updateFloatingHeaderPosition(floatingHeaderElement);
                    });
                }
                parentElement = parentElement.parentElement;
            }

            const isFloatingHeaderActive = window.localStorage?.getItem(LOCAL_STORAGE_FLOATING_HEADER_ACTIVE) === "true";
            svgRoot.classList.toggle("floating-header-active", isFloatingHeaderActive);
            console.log("In accordance with local storage, setting floating header active = ", isFloatingHeaderActive);

        } catch(e) {
            console.error("Error while initialising floating header:", e, svgRoot);
            disableFloatingHeaderDueToError();
        }
	}

    function handleParticipantFilterClick(clickedParticipantElem) {
        const clickedParticipantName = clickedParticipantElem.getAttribute("data-participant");

        const allFilteredParticipantsNames = new Set(Array
                .from(svgRoot.querySelectorAll("g.participant.filter-highlight"))
                .map(elem =&gt; elem.getAttribute("data-participant")));

        if (allFilteredParticipantsNames.has(clickedParticipantName)) {
            allFilteredParticipantsNames.delete(clickedParticipantName);
        } else {
            allFilteredParticipantsNames.add(clickedParticipantName);
        }

        svgRoot.querySelectorAll("g.participant").forEach(participantElem =&gt; {
            const shouldHighlight = allFilteredParticipantsNames.has(participantElem.getAttribute("data-participant"));
            participantElem.classList.toggle("filter-highlight", shouldHighlight);
        });

        svgRoot.querySelectorAll("g.message").forEach(messageElem =&gt; {
            const participant1 = messageElem.getAttribute("data-participant-1");
            const participant2 = messageElem.getAttribute("data-participant-2");

            const participant1Matches = allFilteredParticipantsNames.has(participant1);
            const participant2Matches = allFilteredParticipantsNames.has(participant2);

            const shouldHighlight = (allFilteredParticipantsNames.size === 1)
                ? (participant1Matches || participant2Matches)
                : (participant1Matches &amp;&amp; participant2Matches &amp;&amp; participant1 !== participant2);

            messageElem.classList.toggle("filter-highlight", shouldHighlight);
        });

        if (allFilteredParticipantsNames.size === 0) {
            svgRoot.classList.remove("filter-active", "filter-nomatch");
        } else {
            svgRoot.classList.add("filter-active");
            if (svgRoot.querySelector("g.message.filter-highlight")) {
                svgRoot.classList.remove("filter-nomatch");
            } else {
                svgRoot.classList.add("filter-nomatch");
            }
        }
    }

	function initParticipantFiltering() {
	    svgRoot.querySelectorAll(".participant").forEach(participantElem =&gt; {
	        participantElem.addEventListener("click", () =&gt; {
	            handleParticipantFilterClick(participantElem);
	        });
	    });

	    svgRoot.querySelector("svg &gt; defs").innerHTML += `
            &lt;filter id="colorize-green"&gt;
              &lt;feColorMatrix in="SourceGraphic" type="matrix" values="0 0 0 0 0
                                                                      0.2 0.2 0.2 0.2 0
                                                                      0 0 0 0 0
                                                                      0 0 0 1 0" /&gt;
            &lt;/filter&gt;
            &lt;filter id="colorize-red"&gt;
              &lt;feColorMatrix in="SourceGraphic" type="matrix" values="0.2 0.2 0.2 0.2 0
                                                                      0 0 0 0 0
                                                                      0 0 0 0 0
                                                                      0 0 0 1 0" /&gt;
            &lt;/filter&gt;`;
	}

	const svgRoot = findAncestorWithTagName(document.currentScript, "svg");

	document.addEventListener("DOMContentLoaded", () =&gt; {
		initFloatingHeader();
		initParticipantFiltering();
	});
})();
</script></defs><g><g><title>Begin</title><rect fill="#000000" fill-opacity="0.00000" height="77.6211" width="8" x="26.6587" y="36.4883"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="30" x2="30" y1="36.4883" y2="114.1094"/></g><g class="participant participant-head" data-participant="Begin"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="51.3174" x="5" y="5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37.3174" x="12" y="25.5352">Begin</text></g><g class="participant participant-tail" data-participant="Begin"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="51.3174" x="5" y="113.1094"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37.3174" x="12" y="133.6445">Begin</text></g><g class="message" data-participant-1="Begin" data-participant-2="Begin"><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="30.6587" x2="72.6587" y1="83.1094" y2="83.1094"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="72.6587" x2="72.6587" y1="83.1094" y2="96.1094"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="31.6587" x2="72.6587" y1="96.1094" y2="96.1094"/><polygon fill="#181818" points="41.6587,92.1094,31.6587,96.1094,41.6587,100.1094,37.6587,96.1094" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="68.8276" x="37.6587" y="63.0566">CreateItem</text><text fill="#0000FF" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="63.4702" x="37.6587" y="78.3672">&lt; Created</text></g><!--SRC=[KomeIapFJLGeBalFp2j9BKfCBiaiIrKeAIfDvG82frIWi8Akhfq2c6Mbu5oKcbYIwbcIcXkJPvESdvDVP9MKKvfgPmELIR7H1ulQSN410000]--></g></svg>